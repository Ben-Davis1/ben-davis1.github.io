{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["min","max","result","Math","ceil","floor","random","turns","options","_","shuffle","console","log","percent","length","numbers","map","o","i","actualPercent","name","number","winner","reduce","acc","curr","App","useState","showWinner","setShowWinner","useEffect","storageWinner","localStorage","getItem","setItem","parseInt","setTimeout","range","className","startAngle","data","title","value","color","label","dataEntry","labelStyle","fontSize","fontFamily","fontWeight","fill","style","transform","xmlns","x","y","width","height","viewBox","stroke","mixBlendMode","d","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67f73f22.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport _ from \"underscore\";\nimport { PieChart } from \"react-minimal-pie-chart\";\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\n\nconst result = getRandomIntInclusive(0, 360);\n\nconst turns = Math.ceil(Math.random() * 10);\n\nconst options = _.shuffle([\n  \"Hendo\",\n  \"Ben\",\n  \"Ines\",\n  \"Pradeep\",\n  \"Ashley\",\n  \"Mitchell\",\n  \"Arjun\"\n]);\n\nconsole.log(turns);\n\nconsole.log(result);\n\nconst percent = 100 / options.length;\n\nconst numbers = options.map((o, i) => {\n  const actualPercent = i * percent;\n\n  return { name: o, number: 360 * (actualPercent / 100), actualPercent };\n});\n\nconst winner = numbers.reduce((acc, curr, i) => {\n  if (curr.number <= result && curr.number >= (acc.number || 0)) {\n    return curr;\n  }\n\n  if (i === options.length - 1 && acc === {}) {\n    return options[0];\n  }\n\n  return acc;\n}, {});\n\nconsole.log(winner);\n\nfunction App() {\n  const [showWinner, setShowWinner] = useState(false);\n\n  useEffect(() => {\n    const storageWinner = localStorage.getItem(winner.name);\n    if (storageWinner) {\n      localStorage.setItem(winner.name, parseInt(storageWinner) + 1);\n    } else {\n      localStorage.setItem(winner.name, 1);\n    }\n    setTimeout(() => setShowWinner(true), 4000);\n  }, []);\n\n  const range = numbers[1].number - numbers[0].number;\n  return (\n    <>\n      <div className=\"pie\">\n        <PieChart\n          startAngle={270}\n          data={[\n            { title: options[0], value: range, color: \"#ABDBB9\" },\n            { title: options[1], value: range, color: \"#2EA450\" },\n            { title: options[2], value: range, color: \"#ABDBB9\" },\n            { title: options[3], value: range, color: \"#2EA450\" },\n            { title: options[4], value: range, color: \"#ABDBB9\" },\n            { title: options[5], value: range, color: \"#2EA450\" },\n            { title: options[6], value: range, color: \"#1B2450\" },\n          ]}\n          label={({ dataEntry }) => {\n            return dataEntry.title;\n          }}\n          labelStyle={{\n            fontSize: \"5px\",\n            fontFamily: \"sans-serif\",\n            fontWeight: \"bold\",\n            fill: \"#fff\",\n          }}\n        />\n        <div\n          className=\"App\"\n          style={{ transform: `rotate(${360 * turns + result}deg)` }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            x=\"0px\"\n            y=\"0px\"\n            width=\"100\"\n            height=\"100\"\n            viewBox=\"0 0 172 172\"\n            style={{ fill: \"#000000\" }}\n          >\n            <g transform=\"translate(4.73,4.73) scale(0.945,0.945)\">\n              <g\n                fill=\"none\"\n                fill-rule=\"nonzero\"\n                stroke=\"none\"\n                stroke-width=\"none\"\n                stroke-linecap=\"butt\"\n                stroke-linejoin=\"none\"\n                stroke-miterlimit=\"10\"\n                stroke-dasharray=\"\"\n                stroke-dashoffset=\"0\"\n                font-family=\"none\"\n                font-weight=\"none\"\n                font-size=\"none\"\n                text-anchor=\"none\"\n                style={{ mixBlendMode: \"normal\" }}\n              >\n                <g\n                  fill=\"#0070ff\"\n                  stroke=\"#000000\"\n                  stroke-width=\"10\"\n                  stroke-linejoin=\"round\"\n                >\n                  <path d=\"M114.66667,35.83333h-21.5v129h-14.33333v-129h-21.5l28.66667,-28.66667z\"></path>\n                </g>\n                <path\n                  d=\"M0,172v-172h172v172z\"\n                  fill=\"none\"\n                  stroke=\"none\"\n                  stroke-width=\"1\"\n                  stroke-linejoin=\"miter\"\n                ></path>\n                <g\n                  fill=\"#0070ff\"\n                  stroke=\"none\"\n                  stroke-width=\"1\"\n                  stroke-linejoin=\"miter\"\n                >\n                  <path d=\"M86,7.16667l-28.66667,28.66667h21.5v129h14.33333v-129h21.5z\"></path>\n                </g>\n                <path\n                  d=\"\"\n                  fill=\"none\"\n                  stroke=\"none\"\n                  stroke-width=\"1\"\n                  stroke-linejoin=\"miter\"\n                ></path>\n              </g>\n            </g>\n          </svg>\n        </div>\n\n        {showWinner && <div>{winner.name}</div>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}